{
  "openapi": "3.0.0",
  "info": {
    "title": "DEVocean REST API",
    "description": "React API documentation of DEVocean project",
    "termsOfService": "http://example.com/terms",
    "contact": {
      "name": "Theophilus Omoregbee",
      "url": "http://github.com/theo4u",
      "email": "theo4u@ymail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:1337/"
    }
  ],
  "externalDocs": {
    "url": "https://theoomoregbee.github.io/"
  },
  "tags": [
    {
      "name": "Assignee",
      "description": "Sails blueprint actions for the **Assignee** model"
    },
    {
      "name": "Notification",
      "description": "Sails blueprint actions for the **Notification** model"
    },
    {
      "name": "Status",
      "description": "Sails blueprint actions for the **Status** model"
    },
    {
      "name": "Tag",
      "description": "Sails blueprint actions for the **Tag** model"
    },
    {
      "name": "Task",
      "description": "Sails blueprint actions for the **Task** model"
    },
    {
      "name": "Teammate",
      "description": "Sails blueprint actions for the **Teammate** model"
    },
    {
      "name": "Nav items"
    }
  ],
  "components": {
    "schemas": {
      "assignee": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/assignee-without-required-constraint"
          },
          {
            "required": [
              "teammate",
              "assignedDate"
            ]
          }
        ]
      },
      "assignee-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Assignee**",
        "properties": {
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "teammate": {
            "description": "JSON dictionary representing the **teammate** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/teammate"
              }
            ]
          },
          "task": {
            "description": "JSON dictionary representing the **task** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/task"
              }
            ]
          },
          "assignedDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "notification": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/notification-without-required-constraint"
          },
          {
            "required": [
              "title",
              "time"
            ]
          }
        ]
      },
      "notification-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Notification**",
        "properties": {
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "title": {
            "type": "string"
          },
          "time": {
            "type": "string",
            "format": "date"
          },
          "author": {
            "description": "JSON dictionary representing the **teammate** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/teammate"
              }
            ]
          },
          "fullText": {
            "type": "string"
          }
        }
      },
      "status": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/status-without-required-constraint"
          },
          {
            "required": [
              "name"
            ]
          }
        ]
      },
      "status-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Status**",
        "properties": {
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          }
        }
      },
      "tag": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/tag-without-required-constraint"
          },
          {
            "required": [
              "name"
            ]
          }
        ]
      },
      "tag-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Tag**",
        "properties": {
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string"
          }
        }
      },
      "task": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/task-without-required-constraint"
          },
          {
            "required": [
              "title",
              "priority",
              "timeInStatus",
              "tag",
              "status"
            ]
          }
        ]
      },
      "task-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Task**",
        "properties": {
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "title": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high",
              "highest",
              "blocker"
            ]
          },
          "timeInStatus": {
            "type": "string",
            "format": "date"
          },
          "estimate": {
            "type": "number",
            "format": "double"
          },
          "reportedTime": {
            "type": "number",
            "format": "double"
          },
          "tag": {
            "description": "JSON dictionary representing the **tag** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/tag"
              }
            ]
          },
          "status": {
            "description": "JSON dictionary representing the **status** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/status"
              }
            ]
          },
          "assignee": {
            "description": "Array of **assignee**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assignee"
            }
          },
          "description": {
            "type": "string"
          }
        }
      },
      "teammate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/teammate-without-required-constraint"
          },
          {
            "required": [
              "name",
              "lastName",
              "referAs"
            ]
          }
        ]
      },
      "teammate-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Teammate**",
        "properties": {
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "referAs": {
            "type": "string",
            "enum": [
              "he",
              "she"
            ]
          },
          "createdNotifications": {
            "description": "Array of **notification**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notification"
            }
          },
          "assignedTasks": {
            "description": "Array of **assignee**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assignee"
            }
          }
        }
      }
    },
    "parameters": {
      "ModelPKParam-assignee": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Assignee** record's primary key value"
      },
      "ModelPKParam-notification": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Notification** record's primary key value"
      },
      "ModelPKParam-status": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Status** record's primary key value"
      },
      "ModelPKParam-tag": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Tag** record's primary key value"
      },
      "ModelPKParam-task": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Task** record's primary key value"
      },
      "ModelPKParam-teammate": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Teammate** record's primary key value"
      },
      "AttributeFilterParam": {
        "in": "query",
        "name": "_*_",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "To filter results based on a particular attribute, specify a query parameter with the same name as the attribute defined on your model. For instance, if our `Purchase` model has an `amount` attribute, we could send `GET /purchase?amount=99.99` to return a list of $99.99 purchases."
      },
      "WhereQueryParam": {
        "in": "query",
        "name": "where",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Instead of filtering based on a specific attribute, you may instead choose to provide a `where` parameter with the WHERE piece of a [Waterline criteria](https://sailsjs.com/documentation/concepts/models-and-orm/query-language), _encoded as a JSON string_. This allows you to take advantage of `contains`, `startsWith`, and other sub-attribute criteria modifiers for more powerful `find()` queries.\n\ne.g. `?where={\"name\":{\"contains\":\"theodore\"}}`"
      },
      "LimitQueryParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The maximum number of records to send back (useful for pagination). Defaults to 30."
      },
      "SkipQueryParam": {
        "in": "query",
        "name": "skip",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The number of records to skip (useful for pagination)."
      },
      "SortQueryParam": {
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The sort order. By default, returned records are sorted by primary key value in ascending order.\n\ne.g. `?sort=lastName%20ASC`"
      }
    }
  },
  "paths": {
    "/security/grant-csrf-token": {
      "get": {
        "summary": "/security/grant-csrf-token",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "/security/grant-csrf-token",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "/security/grant-csrf-token",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "/security/grant-csrf-token",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "/security/grant-csrf-token",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/nav-items": {
      "get": {
        "summary": "Nav items",
        "tags": [
          "Nav items"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Nav items",
        "tags": [
          "Nav items"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Nav items",
        "tags": [
          "Nav items"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Nav items",
        "tags": [
          "Nav items"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Nav items",
        "tags": [
          "Nav items"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/assignee/find": {
      "get": {
        "summary": "List Assignee (find where) *",
        "description": "Find a list of **Assignee** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,teammate,task,assignedDate"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,teammate,task,assignedDate"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,teammate,task"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Assignee** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/assignee"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/assignee/find/{_id}": {
      "get": {
        "summary": "Get Assignee (find one) *",
        "description": "Look up the **Assignee** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-assignee"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,teammate,task,assignedDate"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,teammate,task,assignedDate"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,teammate,task"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Assignee** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignee"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Assignee** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/assignee/create": {
      "get": {
        "summary": "Create Assignee *",
        "description": "Create a new **Assignee** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "teammate",
            "schema": {
              "description": "JSON dictionary representing the **teammate** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/teammate"
                }
              ]
            },
            "description": "JSON dictionary representing the **teammate** instance or FK when creating / updating / not populated",
            "required": true
          },
          {
            "in": "query",
            "name": "task",
            "schema": {
              "description": "JSON dictionary representing the **task** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/task"
                }
              ]
            },
            "description": "JSON dictionary representing the **task** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "assignedDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Assignee** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignee"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/assignee/update/{_id}": {
      "get": {
        "summary": "Update Assignee *",
        "description": "Update an existing **Assignee** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-assignee"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "teammate",
            "schema": {
              "description": "JSON dictionary representing the **teammate** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/teammate"
                }
              ]
            },
            "description": "JSON dictionary representing the **teammate** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "task",
            "schema": {
              "description": "JSON dictionary representing the **task** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/task"
                }
              ]
            },
            "description": "JSON dictionary representing the **task** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "assignedDate",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Assignee** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignee"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Assignee** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/assignee/destroy/{_id}": {
      "get": {
        "summary": "Delete Assignee (destroy) *",
        "description": "Delete the **Assignee** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-assignee"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Assignee** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignee"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Assignee** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notification/find": {
      "get": {
        "summary": "List Notification (find where) *",
        "description": "Find a list of **Notification** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,author"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Notification** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/notification"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notification/find/{_id}": {
      "get": {
        "summary": "Get Notification (find one) *",
        "description": "Look up the **Notification** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notification"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,author"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Notification** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Notification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notification/create": {
      "get": {
        "summary": "Create Notification *",
        "description": "Create a new **Notification** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "time",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "author",
            "schema": {
              "description": "JSON dictionary representing the **teammate** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/teammate"
                }
              ]
            },
            "description": "JSON dictionary representing the **teammate** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "fullText",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Notification** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notification/update/{_id}": {
      "get": {
        "summary": "Update Notification *",
        "description": "Update an existing **Notification** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notification"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "time",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "author",
            "schema": {
              "description": "JSON dictionary representing the **teammate** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/teammate"
                }
              ]
            },
            "description": "JSON dictionary representing the **teammate** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "fullText",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Notification** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Notification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notification/destroy/{_id}": {
      "get": {
        "summary": "Delete Notification (destroy) *",
        "description": "Delete the **Notification** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notification"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Notification** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Notification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/status/find": {
      "get": {
        "summary": "List Status (find where) *",
        "description": "Find a list of **Status** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Status** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/status"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/status/find/{_id}": {
      "get": {
        "summary": "Get Status (find one) *",
        "description": "Look up the **Status** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-status"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Status** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Status** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/status/create": {
      "get": {
        "summary": "Create Status *",
        "description": "Create a new **Status** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Status** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/status/update/{_id}": {
      "get": {
        "summary": "Update Status *",
        "description": "Update an existing **Status** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-status"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Status** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Status** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/status/destroy/{_id}": {
      "get": {
        "summary": "Delete Status (destroy) *",
        "description": "Delete the **Status** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-status"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Status** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Status** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tag/find": {
      "get": {
        "summary": "List Tag (find where) *",
        "description": "Find a list of **Tag** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,color"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,color"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Tag** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tag/find/{_id}": {
      "get": {
        "summary": "Get Tag (find one) *",
        "description": "Look up the **Tag** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-tag"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,color"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,color"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Tag** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Tag** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tag/create": {
      "get": {
        "summary": "Create Tag *",
        "description": "Create a new **Tag** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "color",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Tag** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tag/update/{_id}": {
      "get": {
        "summary": "Update Tag *",
        "description": "Update an existing **Tag** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-tag"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "color",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Tag** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Tag** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tag/destroy/{_id}": {
      "get": {
        "summary": "Delete Tag (destroy) *",
        "description": "Delete the **Tag** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Tag** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Tag** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/find": {
      "get": {
        "summary": "List Task (find where) *",
        "description": "Find a list of **Task** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,priority,timeInStatus,estimate,reportedTime,tag,status,assignee,description"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,priority,timeInStatus,estimate,reportedTime,tag,status,assignee,description"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,tag,status,assignee"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Task** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/find/{_id}": {
      "get": {
        "summary": "Get Task (find one) *",
        "description": "Look up the **Task** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,priority,timeInStatus,estimate,reportedTime,tag,status,assignee,description"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,priority,timeInStatus,estimate,reportedTime,tag,status,assignee,description"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,tag,status,assignee"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/create": {
      "get": {
        "summary": "Create Task *",
        "description": "Create a new **Task** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high",
                "highest",
                "blocker"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "timeInStatus",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "estimate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "reportedTime",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "description": "JSON dictionary representing the **tag** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/tag"
                }
              ]
            },
            "description": "JSON dictionary representing the **tag** instance or FK when creating / updating / not populated",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "description": "JSON dictionary representing the **status** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/status"
                }
              ]
            },
            "description": "JSON dictionary representing the **status** instance or FK when creating / updating / not populated",
            "required": true
          },
          {
            "in": "query",
            "name": "assignee",
            "schema": {
              "description": "Array of **assignee**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/assignee"
              }
            },
            "description": "Array of **assignee**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Task** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/update/{_id}": {
      "get": {
        "summary": "Update Task *",
        "description": "Update an existing **Task** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high",
                "highest",
                "blocker"
              ]
            }
          },
          {
            "in": "query",
            "name": "timeInStatus",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "estimate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "reportedTime",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "description": "JSON dictionary representing the **tag** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/tag"
                }
              ]
            },
            "description": "JSON dictionary representing the **tag** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "description": "JSON dictionary representing the **status** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/status"
                }
              ]
            },
            "description": "JSON dictionary representing the **status** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "assignee",
            "schema": {
              "description": "Array of **assignee**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/assignee"
              }
            },
            "description": "Array of **assignee**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/destroy/{_id}": {
      "get": {
        "summary": "Delete Task (destroy) *",
        "description": "Delete the **Task** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Task** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for Task *",
        "description": "Add a foreign record to one of this **Task** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "assignee"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Task** record's foreign key values to use as the replacement for this collection (**assignee** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Task** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for Task *",
        "description": "Replace all of the child records in one of this **Task** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "assignee"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "assignee",
            "description": "**Task** record's foreign key values to use as the replacement for this collection (**assignee** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "**Task** record's foreign key values to use as the replacement for this collection (**assignee** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for Task *",
        "description": "Remove a foreign record from one of this **Task** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "assignee"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Task** record's foreign key values to use as the replacement for this collection (**assignee** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Task** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate/find": {
      "get": {
        "summary": "List Teammate (find where) *",
        "description": "Find a list of **Teammate** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications,assignedTasks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications,assignedTasks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,createdNotifications,assignedTasks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Teammate** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/teammate"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate/find/{_id}": {
      "get": {
        "summary": "Get Teammate (find one) *",
        "description": "Look up the **Teammate** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications,assignedTasks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications,assignedTasks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,createdNotifications,assignedTasks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Teammate** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Teammate** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate/create": {
      "get": {
        "summary": "Create Teammate *",
        "description": "Create a new **Teammate** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "lastName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "referAs",
            "schema": {
              "type": "string",
              "enum": [
                "he",
                "she"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "createdNotifications",
            "schema": {
              "description": "Array of **notification**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/notification"
              }
            },
            "description": "Array of **notification**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "assignedTasks",
            "schema": {
              "description": "Array of **assignee**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/assignee"
              }
            },
            "description": "Array of **assignee**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Teammate** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate/update/{_id}": {
      "get": {
        "summary": "Update Teammate *",
        "description": "Update an existing **Teammate** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "lastName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "referAs",
            "schema": {
              "type": "string",
              "enum": [
                "he",
                "she"
              ]
            }
          },
          {
            "in": "query",
            "name": "createdNotifications",
            "schema": {
              "description": "Array of **notification**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/notification"
              }
            },
            "description": "Array of **notification**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "assignedTasks",
            "schema": {
              "description": "Array of **assignee**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/assignee"
              }
            },
            "description": "Array of **assignee**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammate** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Teammate** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate/destroy/{_id}": {
      "get": {
        "summary": "Delete Teammate (destroy) *",
        "description": "Delete the **Teammate** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Teammate** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Teammate** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for Teammate *",
        "description": "Add a foreign record to one of this **Teammate** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications",
                "assignedTasks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**assignedTasks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammate** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Teammate** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for Teammate *",
        "description": "Replace all of the child records in one of this **Teammate** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications",
                "assignedTasks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "createdNotifications",
            "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                "uniqueItems": true
              }
            }
          },
          {
            "in": "query",
            "name": "assignedTasks",
            "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**assignedTasks** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**assignedTasks** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammate** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Teammate** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for Teammate *",
        "description": "Remove a foreign record from one of this **Teammate** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications",
                "assignedTasks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**assignedTasks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammate** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Teammate** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/assignee": {
      "get": {
        "summary": "List Assignee (find where)",
        "description": "Find a list of **Assignee** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,teammate,task,assignedDate"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,teammate,task,assignedDate"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,teammate,task"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Assignee** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/assignee"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Assignee",
        "description": "Create a new **Assignee** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Assignee** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignee"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Assignee instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assignee"
              }
            }
          }
        }
      }
    },
    "/assignee/{_id}": {
      "get": {
        "summary": "Get Assignee (find one)",
        "description": "Look up the **Assignee** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-assignee"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,teammate,task,assignedDate"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,teammate,task,assignedDate"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,teammate,task"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Assignee** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignee"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Assignee** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Assignee",
        "description": "Update an existing **Assignee** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-assignee"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Assignee** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignee"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Assignee** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Assignee instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assignee-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Assignee (destroy)",
        "description": "Delete the **Assignee** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-assignee"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Assignee** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignee"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Assignee** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/assignee/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Assignee",
        "description": "Populate and return foreign record(s) for the given association of this **Assignee** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Assignee"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-assignee"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "teammate",
                "task"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,teammate,task,assignedDate"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,teammate,task,assignedDate"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/teammate"
                      },
                      {
                        "$ref": "#/components/schemas/task"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Assignee** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notification": {
      "get": {
        "summary": "List Notification (find where)",
        "description": "Find a list of **Notification** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,author"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Notification** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/notification"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Notification",
        "description": "Create a new **Notification** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Notification** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Notification instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notification"
              }
            }
          }
        }
      }
    },
    "/notification/{_id}": {
      "get": {
        "summary": "Get Notification (find one)",
        "description": "Look up the **Notification** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notification"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,author"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Notification** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Notification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Notification",
        "description": "Update an existing **Notification** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notification"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Notification** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Notification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Notification instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notification-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Notification (destroy)",
        "description": "Delete the **Notification** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notification"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Notification** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Notification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notification/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Notification",
        "description": "Populate and return foreign record(s) for the given association of this **Notification** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Notification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notification"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "author"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/teammate"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Notification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "List Status (find where)",
        "description": "Find a list of **Status** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Status** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/status"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Status",
        "description": "Create a new **Status** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Status"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Status** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Status instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/status"
              }
            }
          }
        }
      }
    },
    "/status/{_id}": {
      "get": {
        "summary": "Get Status (find one)",
        "description": "Look up the **Status** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-status"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Status** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Status** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Status",
        "description": "Update an existing **Status** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-status"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Status** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Status** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Status instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/status-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Status (destroy)",
        "description": "Delete the **Status** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-status"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Status** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Status** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tag": {
      "get": {
        "summary": "List Tag (find where)",
        "description": "Find a list of **Tag** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,color"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,color"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Tag** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Tag",
        "description": "Create a new **Tag** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Tag"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Tag** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Tag instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          }
        }
      }
    },
    "/tag/{_id}": {
      "get": {
        "summary": "Get Tag (find one)",
        "description": "Look up the **Tag** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-tag"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,color"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,color"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Tag** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Tag** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Tag",
        "description": "Update an existing **Tag** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Tag** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Tag** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Tag instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Tag (destroy)",
        "description": "Delete the **Tag** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Tag** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Tag** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task": {
      "get": {
        "summary": "List Task (find where)",
        "description": "Find a list of **Task** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,priority,timeInStatus,estimate,reportedTime,tag,status,assignee,description"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,priority,timeInStatus,estimate,reportedTime,tag,status,assignee,description"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,tag,status,assignee"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Task** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Task",
        "description": "Create a new **Task** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Task"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Task** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Task instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/task"
              }
            }
          }
        }
      }
    },
    "/task/{_id}": {
      "get": {
        "summary": "Get Task (find one)",
        "description": "Look up the **Task** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,priority,timeInStatus,estimate,reportedTime,tag,status,assignee,description"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,priority,timeInStatus,estimate,reportedTime,tag,status,assignee,description"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,tag,status,assignee"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Task",
        "description": "Update an existing **Task** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Task instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/task-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Task (destroy)",
        "description": "Delete the **Task** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Task** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for Task",
        "description": "Add a foreign record to one of this **Task** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "assignee"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Task** record's foreign key values to use as the replacement for this collection (**assignee** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Task** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for Task",
        "description": "Remove a foreign record from one of this **Task** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "assignee"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Task** record's foreign key values to use as the replacement for this collection (**assignee** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Task** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/{_id}/{association}": {
      "put": {
        "summary": "Replace for Task",
        "description": "Replace all of the child records in one of this **Task** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "assignee"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "**Task** record's foreign key values to use as the replacement for this collection (**assignee** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for Task",
        "description": "Populate and return foreign record(s) for the given association of this **Task** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "tag",
                "status",
                "assignee"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,priority,timeInStatus,estimate,reportedTime,tag,status,assignee,description"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,priority,timeInStatus,estimate,reportedTime,tag,status,assignee,description"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/tag"
                      },
                      {
                        "$ref": "#/components/schemas/status"
                      },
                      {
                        "$ref": "#/components/schemas/assignee"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate": {
      "get": {
        "summary": "List Teammate (find where)",
        "description": "Find a list of **Teammate** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications,assignedTasks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications,assignedTasks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,createdNotifications,assignedTasks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Teammate** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/teammate"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Teammate",
        "description": "Create a new **Teammate** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Teammate** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Teammate instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/teammate"
              }
            }
          }
        }
      }
    },
    "/teammate/{_id}": {
      "get": {
        "summary": "Get Teammate (find one)",
        "description": "Look up the **Teammate** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications,assignedTasks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications,assignedTasks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,createdNotifications,assignedTasks"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Teammate** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Teammate** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Teammate",
        "description": "Update an existing **Teammate** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammate** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Teammate** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Teammate instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/teammate-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Teammate (destroy)",
        "description": "Delete the **Teammate** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Teammate** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Teammate** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for Teammate",
        "description": "Add a foreign record to one of this **Teammate** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications",
                "assignedTasks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**assignedTasks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammate** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Teammate** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for Teammate",
        "description": "Remove a foreign record from one of this **Teammate** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications",
                "assignedTasks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**assignedTasks** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammate** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Teammate** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammate/{_id}/{association}": {
      "put": {
        "summary": "Replace for Teammate",
        "description": "Replace all of the child records in one of this **Teammate** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications",
                "assignedTasks"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammate** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammate"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Teammate** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                      "uniqueItems": true
                    },
                    {
                      "type": "string",
                      "description": "**Teammate** record's foreign key values to use as the replacement for this collection (**assignedTasks** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for Teammate",
        "description": "Populate and return foreign record(s) for the given association of this **Teammate** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Teammate"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammate"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications",
                "assignedTasks"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications,assignedTasks"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications,assignedTasks"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/notification"
                      },
                      {
                        "$ref": "#/components/schemas/assignee"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Teammate** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}