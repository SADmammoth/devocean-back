{
  "openapi": "3.0.0",
  "info": {
    "title": "DEVocean REST API",
    "description": "React API documentation of DEVocean project",
    "termsOfService": "http://example.com/terms",
    "contact": {
      "name": "Theophilus Omoregbee",
      "url": "http://github.com/theo4u",
      "email": "theo4u@ymail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:1337/"
    }
  ],
  "externalDocs": {
    "url": "https://theoomoregbee.github.io/"
  },
  "tags": [
    {
      "name": "Notifications",
      "description": "Sails blueprint actions for the **Notifications** model"
    },
    {
      "name": "Teammates",
      "description": "Sails blueprint actions for the **Teammates** model"
    },
    {
      "name": "Nav items"
    }
  ],
  "components": {
    "schemas": {
      "notifications": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/notifications-without-required-constraint"
          },
          {
            "required": [
              "title",
              "time"
            ]
          }
        ]
      },
      "notifications-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Notifications**",
        "properties": {
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "title": {
            "type": "string"
          },
          "time": {
            "type": "string",
            "format": "date"
          },
          "author": {
            "description": "JSON dictionary representing the **teammates** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/teammates"
              }
            ]
          },
          "fullText": {
            "type": "string"
          }
        }
      },
      "teammates": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/teammates-without-required-constraint"
          },
          {
            "required": [
              "name",
              "lastName",
              "referAs"
            ]
          }
        ]
      },
      "teammates-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Teammates**",
        "properties": {
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "referAs": {
            "type": "string"
          },
          "createdNotifications": {
            "description": "Array of **notifications**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notifications"
            }
          }
        }
      }
    },
    "parameters": {
      "ModelPKParam-notifications": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Notifications** record's primary key value"
      },
      "ModelPKParam-teammates": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Teammates** record's primary key value"
      },
      "AttributeFilterParam": {
        "in": "query",
        "name": "_*_",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "To filter results based on a particular attribute, specify a query parameter with the same name as the attribute defined on your model. For instance, if our `Purchase` model has an `amount` attribute, we could send `GET /purchase?amount=99.99` to return a list of $99.99 purchases."
      },
      "WhereQueryParam": {
        "in": "query",
        "name": "where",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Instead of filtering based on a specific attribute, you may instead choose to provide a `where` parameter with the WHERE piece of a [Waterline criteria](https://sailsjs.com/documentation/concepts/models-and-orm/query-language), _encoded as a JSON string_. This allows you to take advantage of `contains`, `startsWith`, and other sub-attribute criteria modifiers for more powerful `find()` queries.\n\ne.g. `?where={\"name\":{\"contains\":\"theodore\"}}`"
      },
      "LimitQueryParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The maximum number of records to send back (useful for pagination). Defaults to 30."
      },
      "SkipQueryParam": {
        "in": "query",
        "name": "skip",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The number of records to skip (useful for pagination)."
      },
      "SortQueryParam": {
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The sort order. By default, returned records are sorted by primary key value in ascending order.\n\ne.g. `?sort=lastName%20ASC`"
      }
    }
  },
  "paths": {
    "/security/grant-csrf-token": {
      "get": {
        "summary": "/security/grant-csrf-token",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "/security/grant-csrf-token",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "/security/grant-csrf-token",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "/security/grant-csrf-token",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "/security/grant-csrf-token",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/nav-items": {
      "get": {
        "summary": "Nav items",
        "tags": [
          "Nav items"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Nav items",
        "tags": [
          "Nav items"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Nav items",
        "tags": [
          "Nav items"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Nav items",
        "tags": [
          "Nav items"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Nav items",
        "tags": [
          "Nav items"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notifications/find": {
      "get": {
        "summary": "List Notifications (find where) *",
        "description": "Find a list of **Notifications** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,author"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Notifications** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/notifications"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notifications/find/{_id}": {
      "get": {
        "summary": "Get Notifications (find one) *",
        "description": "Look up the **Notifications** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notifications"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,author"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Notifications** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Notifications** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notifications/create": {
      "get": {
        "summary": "Create Notifications *",
        "description": "Create a new **Notifications** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "time",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "author",
            "schema": {
              "description": "JSON dictionary representing the **teammates** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/teammates"
                }
              ]
            },
            "description": "JSON dictionary representing the **teammates** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "fullText",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Notifications** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notifications/update/{_id}": {
      "get": {
        "summary": "Update Notifications *",
        "description": "Update an existing **Notifications** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notifications"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "time",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "author",
            "schema": {
              "description": "JSON dictionary representing the **teammates** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/teammates"
                }
              ]
            },
            "description": "JSON dictionary representing the **teammates** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "fullText",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Notifications** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Notifications** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notifications/destroy/{_id}": {
      "get": {
        "summary": "Delete Notifications (destroy) *",
        "description": "Delete the **Notifications** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notifications"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Notifications** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Notifications** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates/find": {
      "get": {
        "summary": "List Teammates (find where) *",
        "description": "Find a list of **Teammates** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,createdNotifications"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Teammates** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/teammates"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates/find/{_id}": {
      "get": {
        "summary": "Get Teammates (find one) *",
        "description": "Look up the **Teammates** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,createdNotifications"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Teammates** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Teammates** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates/create": {
      "get": {
        "summary": "Create Teammates *",
        "description": "Create a new **Teammates** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "lastName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "referAs",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "createdNotifications",
            "schema": {
              "description": "Array of **notifications**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/notifications"
              }
            },
            "description": "Array of **notifications**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Teammates** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates/update/{_id}": {
      "get": {
        "summary": "Update Teammates *",
        "description": "Update an existing **Teammates** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "lastName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "referAs",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "createdNotifications",
            "schema": {
              "description": "Array of **notifications**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/notifications"
              }
            },
            "description": "Array of **notifications**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammates** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Teammates** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates/destroy/{_id}": {
      "get": {
        "summary": "Delete Teammates (destroy) *",
        "description": "Delete the **Teammates** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Teammates** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Teammates** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for Teammates *",
        "description": "Add a foreign record to one of this **Teammates** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Teammates** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammates** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Teammates** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for Teammates *",
        "description": "Replace all of the child records in one of this **Teammates** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "createdNotifications",
            "description": "**Teammates** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "**Teammates** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammates** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Teammates** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for Teammates *",
        "description": "Remove a foreign record from one of this **Teammates** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Teammates** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammates** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Teammates** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "summary": "List Notifications (find where)",
        "description": "Find a list of **Notifications** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,author"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Notifications** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/notifications"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Notifications",
        "description": "Create a new **Notifications** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Notifications** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Notifications instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notifications"
              }
            }
          }
        }
      }
    },
    "/notifications/{_id}": {
      "get": {
        "summary": "Get Notifications (find one)",
        "description": "Look up the **Notifications** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notifications"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,author"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Notifications** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Notifications** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Notifications",
        "description": "Update an existing **Notifications** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notifications"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Notifications** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Notifications** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Notifications instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notifications-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Notifications (destroy)",
        "description": "Delete the **Notifications** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notifications"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Notifications** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Notifications** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/notifications/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Notifications",
        "description": "Populate and return foreign record(s) for the given association of this **Notifications** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-notifications"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "author"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,title,time,author,fullText"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/teammates"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Notifications** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates": {
      "get": {
        "summary": "List Teammates (find where)",
        "description": "Find a list of **Teammates** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,createdNotifications"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Teammates** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/teammates"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Teammates",
        "description": "Create a new **Teammates** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Teammates** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Teammates instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/teammates"
              }
            }
          }
        }
      }
    },
    "/teammates/{_id}": {
      "get": {
        "summary": "Get Teammates (find one)",
        "description": "Look up the **Teammates** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,createdNotifications"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Teammates** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Teammates** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Teammates",
        "description": "Update an existing **Teammates** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammates** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Teammates** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Teammates instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/teammates-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Teammates (destroy)",
        "description": "Delete the **Teammates** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Teammates** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Teammates** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for Teammates",
        "description": "Add a foreign record to one of this **Teammates** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Teammates** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammates** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Teammates** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for Teammates",
        "description": "Remove a foreign record from one of this **Teammates** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**Teammates** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammates** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Teammates** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/teammates/{_id}/{association}": {
      "put": {
        "summary": "Replace for Teammates",
        "description": "Replace all of the child records in one of this **Teammates** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Teammates** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teammates"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Teammates** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "**Teammates** record's foreign key values to use as the replacement for this collection (**createdNotifications** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for Teammates",
        "description": "Populate and return foreign record(s) for the given association of this **Teammates** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Teammates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-teammates"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "createdNotifications"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,name,lastName,referAs,createdNotifications"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/notifications"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Teammates** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}